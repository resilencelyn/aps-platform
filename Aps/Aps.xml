<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aps</name>
    </assembly>
    <members>
        <member name="M:Aps.Controllers.ProductsController.GetProduct(System.String)">
            <summary>
            通过ID查询商品
            </summary>
            <param name="id">商品ID</param>
            <reponse code="200">查询成功</reponse>
            <reponse code="404">查询失败，商品不存在</reponse>
        </member>
        <member name="M:Aps.Controllers.ProductsController.UpdateProduct(System.String,Aps.Shared.Model.ProductUpdateDto)">
            <summary>
            修改商品的基本属性
            </summary>
            <param name="id" 例如="product_5">商品ID</param>
            <param name="model">更新后的商品</param>
            <response code="204">更新成功</response>
        </member>
        <member name="M:Aps.Controllers.ProductsController.CreateProduct(Aps.Shared.Model.ProductAddDto)">
            <summary>
            添加商品
            </summary>
            <param name="model">所添加的商品</param>
        </member>
        <member name="M:Aps.Controllers.ProductsController.DeleteProduct(System.String)">
            <summary>
            删除商品
            </summary>
            <remarks>Awesomeness!</remarks>
            <param name="id">删除商品的ID</param>
            <response code="204">删除成功</response>
            <response code="404">未能找到所删除的商品</response>
        </member>
        <member name="M:Aps.Controllers.ProductsController.GetSemiProductRequisiteFromProduct(System.String)">
            <summary>
            查询商品装配所需的半成品
            </summary>
            <param name="productId">所查询的商品ID</param>
        </member>
        <member name="T:Aps.Infrastructure.Repositories.IRepository`2">
            <summary>
            此接口是所有仓储的约定，此接口仅作为约定，用于标记它们
            </summary>
            <typeparam name="TEntity">当前传入仓储的实体类型</typeparam>
            <typeparam name="TPrimaryKey">传入仓储的主键类别</typeparam>
        </member>
        <member name="M:Aps.Infrastructure.Repositories.IRepository`2.GetAll">
            <summary>
            获取用于从整个表中检索实体的IQueryable
            </summary>
            <returns>可用于从数据库中选择实体</returns>
        </member>
        <member name="M:Aps.Infrastructure.Repositories.IRepository`2.GetAllList">
            <summary>
            用于获取所有实体
            </summary>
            <returns>所有实体列表</returns>
        </member>
        <member name="M:Aps.Infrastructure.Repositories.IRepository`2.GetAllListAsync">
            <summary>
            用于获取所有实体的异步实现
            </summary>
            <returns>所有实体列表</returns>
        </member>
        <member name="M:Aps.Infrastructure.Repositories.IRepository`2.GetAllList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            用于获取传入本方法的所有实体<paramref name="predicate"/>
            </summary>
            <param name="predicate">筛选实体的条件</param>
            <returns>所有实体列表</returns>
        </member>
        <member name="M:Aps.Infrastructure.Repositories.IRepository`2.GetAllListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            用于获取传入本方法的所有实体<paramref name="predicate"/>
            </summary>
            <param name="predicate">筛选实体的条件</param>
            <returns>所有实体列表</returns>
        </member>
        <member name="M:Aps.Infrastructure.Repositories.IRepository`2.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            通过传入的筛选条件来获取实体信息，如果查询不到返回值，则会引发异常
            </summary>
            <param name="predicate">Entity</param>
        </member>
        <member name="M:Aps.Infrastructure.Repositories.IRepository`2.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            通过传入的筛选条件来获取实体信息，如果查询不到返回值，则会引发异常
            </summary>
            <param name="predicate">Entity</param>
        </member>
        <member name="M:Aps.Infrastructure.Repositories.IRepository`2.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            通过传入的筛选条件来获取实体信息，如果没有找到，则返回null
            </summary>
            <param name="predicate">筛选条件</param>
        </member>
        <member name="M:Aps.Infrastructure.Repositories.IRepository`2.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            通过传入的筛选条件来获取实体信息，如果没有找到，则返回null
            </summary>
            <param name="predicate">筛选条件</param>
        </member>
        <member name="M:Aps.Infrastructure.Repositories.IRepository`2.Insert(`0)">
            <summary>
            添加一个新实体信息 
            </summary>
            <param name="entity">被添加的实体</param>
            <returns></returns>
        </member>
        <member name="M:Aps.Infrastructure.Repositories.IRepository`2.InsertAsync(`0)">
            <summary>
            添加一个新实体信息 
            </summary>
            <param name="entity">被添加的实体</param>
            <returns></returns>
        </member>
        <member name="M:Aps.Infrastructure.Repositories.IRepository`2.Update(`0)">
            <summary>
            更新现有实体 
            </summary>
            <param name="entity">Entity</param>
        </member>
        <member name="M:Aps.Infrastructure.Repositories.IRepository`2.UpdateAsync(`0)">
            <summary>
            更新现有实体 
            </summary>
            <param name="entity">Entity</param>
        </member>
        <member name="M:Aps.Infrastructure.Repositories.IRepository`2.Delete(`0)">
            <summary>
            删除一个实体
            </summary>
            <param name="entity">Entity</param>
        </member>
        <member name="M:Aps.Infrastructure.Repositories.IRepository`2.DeleteAsync(`0)">
            <summary>
            删除一个实体
            </summary>
            <param name="entity">Entity</param>
        </member>
        <member name="M:Aps.Infrastructure.Repositories.IRepository`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            按传日的条件可删除多个实体
            注意：所有符合给定条件的实体都将被检索和删除
            如果条件比较多，则待删除的实体也比较多，这可能会导致主要的性能问题
            </summary>
            <param name="predicate">Entity</param>
        </member>
        <member name="M:Aps.Infrastructure.Repositories.IRepository`2.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            按传日的条件可删除多个实体
            注意：所有符合给定条件的实体都将被检索和删除
            如果条件比较多，则待删除的实体也比较多，这可能会导致主要的性能问题
            </summary>
            <param name="predicate">Entity</param>
        </member>
        <member name="T:Aps.Infrastructure.Repositories.RepositoryBase`2">
            <summary>
            默认仓储的通用功能实现，用于所有的领域模型
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TPrimaryKey"></typeparam>
        </member>
        <member name="F:Aps.Infrastructure.Repositories.RepositoryBase`2._apsContext">
            <summary>
            数据库上下文
            </summary>
        </member>
        <member name="P:Aps.Infrastructure.Repositories.RepositoryBase`2.Table">
            <summary>
            通过反省，从数据上下文中获得领域模型
            </summary>
        </member>
    </members>
</doc>
